{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PT-Devops-Task docs","text":""},{"location":"#about","title":"About","text":"<p>The first part of the technical test solution is implemented using Python and SQL, demonstrating the ability to interact with Docker containers and manage SQL databases. The program is structured around the main script, main.py, and a utility script, utils.py.</p> <p>The main.py script serves as the entry point of the program. It establishes an SSH connection to a Docker container running locally on port 2222 using the SSHConnector class from utils.py. Once connected, it checks the version of an application (sql.jar) using the APPUpdater class, updating it to a working version if necessary. It then makes a single SQL query and uses the result to generate and print a 'report card' using the ReportCard class. In case of any exceptions, it sends a message via Discord and SMS using the NotificationSender class.</p> <p>The utils.py script contains all necessary classes (SSHConnector, APPUpdater, ReportCard, DiscordMessage) for the program to function.</p> <p>The program's dependencies are listed in the requirements.txt file and include paramiko, pandas, and tabulate. These can be installed using pip.</p> <p>The second part of the technical test involves log analysis using Bash commands. This part of the test is is focused on parsing and analyzing server logs compressed with Zstandard (.gz files).</p> <p>The program's source code and documentation are available on GitHub. For more information, please contact me on LinkedIn.</p>"},{"location":"task1/","title":"Task 1 - Student grades","text":""},{"location":"task1/#dependencies","title":"Dependencies","text":"<ul> <li>python &gt;=3.9.2</li> <li>twilio</li> <li>requests</li> <li>paramiko</li> <li>pandas</li> <li>tabulate</li> </ul>"},{"location":"task1/#installing-dependencies","title":"Installing dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"task1/#running-the-program-from-project-root","title":"Running the program from project root","text":"<pre><code>python3 main.py\n</code></pre>"},{"location":"task1/#expected-output","title":"Expected output","text":"Student Biology Mathematics Arts Chemistry Programming Geography Physics Astronomy History Robotics Abbigail Barrera (24) 4 5 4 4 2 2 2 3 4 2 Abigayle Hogan (23) 2 4 5 2 2 2 2 2 3 3 Adrian Abbott (25) 4 2 3 4 3 4 5 2 5 5 Aidyn Gilbert (30) 3 5 4 4 4 4 3 2 4 3 Alayna Hardy (31) 3 5 5 4 2 2 2 2 2 3 Aldo Leach (28) 5 5 5 2 3 3 3 2 4 5 Alijah Whitney (31) 5 2 2 5 4 2 3 3 5 5 Alondra Duran (23) 2 2 2 5 3 4 5 4 5 3"},{"location":"task1/#error-handling","title":"Error handling","text":"<p>Should the program run into any exceptions it will send out timestamped error messages via Discord and SMS (Twilio). Since I am using a Twilio trial to demonstrate this implementation, it means that messages can only be sent to my own phone number, however that also means that I can safely leave the API credentials in the code without any risk to myself.</p>"},{"location":"task1/#discord-message","title":"Discord Message","text":""},{"location":"task1/#twilio-message","title":"Twilio Message","text":""},{"location":"task2/","title":"Task 2 - Log analysis","text":""},{"location":"task2/#request-counts","title":"Request counts","text":"<ol> <li> <p>Get the count of GetTemporaryAuthenticationTokenRequest from the log</p> <pre><code>zstdgrep -c \"GetTemporaryAuthenticationTokenRequest\" /opt/local/logs/server.log.gz\n</code></pre> <p>Expected output:</p> <pre><code>14823\n</code></pre> </li> <li> <p>Get count of LoginRequests per minute</p> <pre><code>zstdgrep 'LoginRequest' /opt/local/logs/server.log.gz | awk -F':' '{print $1}' | sed 's/^I //' | sort | uniq -c | awk '{print $1, $2, $3}'\n</code></pre> <p>Expected output:</p> <pre><code>636 0114-1145\n1400 0114-1146\n1400 0114-1147\n1400 0114-1148\n1400 0114-1149\n1400 0114-1150\n1400 0114-1151\n1400 0114-1152\n1400 0114-1153\n1400 0114-1154\n1400 0114-1155\n186 0114-1156\n</code></pre> </li> <li> <p>List all requests (and their counts) that had JSON OUT: string in it</p> <pre><code>zstdgrep ' JSON OUT: ' /opt/local/logs/server.log.gz | awk -F' ' '{print $6}' | awk -F'\\\\(' '{print $1}' | sort | uniq -c\n</code></pre> <p>Expected output:</p> <pre><code>14823 GetTemporaryAuthenticationTokenRequest-31284\n14822 LoginRequest-31280\n</code></pre> </li> </ol>"},{"location":"task2/#parse-data","title":"Parse data","text":"<p>For request/response with id 149418, get values for obj=, ipAddress=, customData=[KV(5, playerCode= and flow= in one line</p> <pre><code>target=$(zstdgrep '149418' /opt/local/logs/server.log.gz)\nobj=$(echo \"$target\" | grep -E -o 'obj=([^,]*)' | awk -F'=' '{print $2}' | tr -d '\\\\')\nipAddress=$(echo \"$target\" | grep -E -o 'ipAddress=([^,]*)' | awk -F'=' '{print $2}' | tr -d '\\\\')\nhash=$(echo \"$target\" | grep -E -o '#([^)]*)')\nplayerCode=$(echo \"$target\" | grep -E -o 'playerCode=([^,]*)' | awk -F'=' '{print $2}' | tr -d '\\\\')\nflow=$(echo \"$target\" | grep 'LoginResponse' | grep -E -o 'flow=([^,]*)\\)' | tr -d '\\)' | sed 's/flow=//')\necho $obj $ipAddress $hash $playerCode $flow\n</code></pre> <p>Expected output:</p> <pre><code>PT04LOGIN49756-playtech93004, 10.144.227.18, #webVent, 58619722, 250168855196269516:2\n</code></pre>"},{"location":"task2/#bonus","title":"Bonus","text":"<p>Get the duration= of all requests, summed up</p> <pre><code>echo $(zstdgrep 'duration=' /opt/local/logs/server.log.gz | grep -o 'duration=[0-9.]*' | awk -F'=' '{print $2}' | paste -sd+ - | bc) \"(milliseconds)\"\n</code></pre> <p>Expected output:</p> <pre><code>608740 (milliseconds)\n</code></pre>"}]}